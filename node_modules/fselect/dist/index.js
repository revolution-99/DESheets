"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _mapValues = _interopRequireDefault(require("lodash/mapValues"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var getStateFromSelectorProps = function getStateFromSelectorProps(state, props, selectorName, defaultState) {
  // 1. If selector is missing, return rootState
  if (!props.hasOwnProperty(selectorName)) {
    return {
      state: defaultState
    };
  }

  var selector = props[selectorName]; // 2. If selector is a function, use selector function to return a slicedState

  if ((0, _isFunction.default)(selector)) {
    return {
      state: selector(state)
    };
  } // 3. If selector is an object, use values as selector function to return slicedState object


  if ((0, _isPlainObject.default)(selector)) {
    return {
      state: (0, _mapValues.default)(selector, function (v) {
        return (0, _isFunction.default)(v) ? v(state) : v;
      })
    };
  } // 4. If selector is an array, use values as selector function to return slicedStates array


  if ((0, _isArray.default)(selector)) {
    return {
      state: selector.map(function (v) {
        return (0, _isFunction.default)(v) ? v(state) : v;
      })
    };
  } // 5. Just return selector as if it is a state


  return {
    state: selector
  };
};

var mapState = function mapState(state, props) {
  var selectorState = getStateFromSelectorProps(state, props, 'selector', state).state;
  var selectorNotState = getStateFromSelectorProps(state, props, 'selectorNot', false).state;
  return {
    state: selectorState,
    stateNot: selectorNotState
  };
};

var _default = (0, _reactRedux.connect)(mapState)(
/*#__PURE__*/
function (_React$Component) {
  _inherits(FSelect, _React$Component);

  function FSelect() {
    _classCallCheck(this, FSelect);

    return _possibleConstructorReturn(this, _getPrototypeOf(FSelect).apply(this, arguments));
  }

  _createClass(FSelect, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          state = _this$props.state,
          stateNot = _this$props.stateNot,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["state", "stateNot", "children"]);

      if (children) {
        if ((0, _isFunction.default)(children)) {
          // Render Props
          return children(state, props);
        } else {
          var stateTruthy = checkIfStateIsTruthy(state);
          var stateNotTruthy = checkIfStateNotIsFalsy(stateNot);

          if (stateTruthy && stateNotTruthy) {
            return children;
          } else {
            return null;
          }
        }
      } // Self closing tag


      return state === undefined ? null : state;
    }
  }]);

  return FSelect;
}(_react.default.Component));

exports.default = _default;

var checkIfStateIsTruthy = function checkIfStateIsTruthy(state) {
  // Conditional Render (render only if all selector object values are truthy)
  if ((0, _isPlainObject.default)(state)) {
    var values = Object.values(state);

    for (var _i = 0; _i < values.length; _i++) {
      var val = values[_i];

      if (!val) {
        return false;
      }
    }

    return true;
  } // Conditional Render (render only if all selector array values are truthy)


  if ((0, _isArray.default)(state)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _val = _step.value;

        if (!_val) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  } // Coditional Render only if selector is truthy


  return !state ? false : true;
};

var checkIfStateNotIsFalsy = function checkIfStateNotIsFalsy(state) {
  // Conditional Render (render only if all selector object values are truthy)
  if ((0, _isPlainObject.default)(state)) {
    var values = Object.values(state);

    for (var _i2 = 0; _i2 < values.length; _i2++) {
      var val = values[_i2];

      if (val) {
        return false;
      }
    }

    return true;
  } // Conditional Render (render only if all selector array values are truthy)


  if ((0, _isArray.default)(state)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = state[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _val2 = _step2.value;

        if (_val2) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return true;
  } // Coditional Render only if selector is truthy


  return !!state ? false : true;
};